-- check if a key of the array of keys has the specified time
fn includesTime arr timeToSearch =
(
	for ai = 1 to arr.count do
	(
		if (arr[ai].time == timeToSearch) then
		(
			return ai
		)
	)
	return -1
)

fn formatAnimation obj stream =
(
	objSkin = obj.modifiers[#skin]
	if (objSkin != undefined) then
	(
		comma = ""
		
		format "%\"%\":%{" (tabs 2) (if (exportAnimationsName.count > 0) then exportAnimationsName else "Anim") sp to:stream
		
		if (exportAnimationAssociatedSkin) then
		(
			format "%%%\"sk\":%\"%\"" comma nl (tabs 3) sp obj.name to:stream
			comma = ","
		)
		
		if (exportAnimationAssociatedMesh) then
		(
			format "%%%\"ms\":%\"%\"" comma nl (tabs 3) sp obj.name to:stream
			comma = ","
		)
		
		timeFactor = 1
		if (timeConfiguration.playbackSpeed == 1) then
		(
			timeFactor = 4
		)
		else if (timeConfiguration.playbackSpeed == 2) then
		(
			timeFactor = 2
		)
		else if (timeConfiguration.playbackSpeed == 3) then
		(
			timeFactor = 1
		)
		else if (timeConfiguration.playbackSpeed == 4) then
		(
			timeFactor = 0.5
		)
		else if (timeConfiguration.playbackSpeed == 5) then
		(
			timeFactor = 0.25
		)
		ticksPerSeconds = 4800
		framesCount = animationRange.end - animationRange.start + 1
		ticksCount = framesCount as float
		durationInSeconds = (ticksCount / ticksPerSeconds) * timeFactor
		
		format "%%%\"dr\":%%" comma nl (tabs 3) sp durationInSeconds to:stream
		comma = ","
		
		format "%%%\"hr\":%[" comma nl (tabs 3) sp to:stream
		
		keyStart = (animationRange.start as integer) / 160
		keyEnd = (animationRange.end as integer) / 160
		keyCount = keyEnd - keyStart + 1
		
		initialSliderTimePos = sliderTime
		
		bonesFromSkin = skinOps.GetBoneNodes objSkin
		allBonesSorted =  getAllBonesSorted bonesFromSkin
		
		struct OneBone (bn=undefined, ky=#())
		struct OneKey (tm=undefined, ps=undefined, rt=undefined, sc=undefined)
		allBones = #()
		
		-- Initialize array
		for bi = 1 to allBonesSorted.count do
		(
			append allBones (OneBone bn:allBonesSorted[bi])
		)
		
		-- Extract data (by parsing all frames only one time by mesh)
		for k = keyStart to keyEnd do
		(
			sliderTime = k
			ktime = (k as time)
			
			for bi = 1 to allBones.count do
			(
				oneBone = allBones[bi]
				b = oneBone.bn
				
				localTransform = b.transform
				
				if (b.parent != undefined) then
				(
					localTransform *= inverse b.parent.transform
				)
				else
				(
					localTransform *= inverse obj.transform
				)
				
				localRotation = localTransform.rotation
				
				if flipAxis then
				(
					localTransform *= flipAxisMatrix
					localRotation *= flipAxisMatrix
				)
				
				if (
					k == keyStart or
					k == keyEnd or
					(includesTime b.position.controller.keys ktime != -1) or
					(includesTime b.rotation.controller.keys ktime != -1) or
					(includesTime b.scale.controller.keys ktime != -1)
				) then
				(
					ticksCount = ktime as float
					btimeInSeconds = (ticksCount / ticksPerSeconds) * timeFactor
					
					-- Inverse the rotation because : "Internally, 3ds Max stores rotations in node matrices using the left-hand rule."
					-- Cf. Maxscript doc : Using Node Transform Properties (https://help.autodesk.com/view/MAXDEV/2022/ENU/?guid=GUID-3B001F21-8FE9-4663-A972-E648682A0ACD)
					append oneBone.ky (OneKey tm:btimeInSeconds ps:localTransform.position rt:(inverse localRotation) sc:localTransform.scale)
				)
			)
		)
		
		-- Write data
		comma2 = ""
		for i = 1 to allBones.count do
		(
			oneBone = allBones[i]
			
			format "%%%{" comma2 nl (tabs 4) to:stream
			format "%%\"bn\":%\"%\"" nl (tabs 5) sp oneBone.bn.name to:stream
			format ",%%\"ky\":%[" nl (tabs 5) sp to:stream
			
			keyCount = oneBone.ky.count
			comma3 = ""
			for k = 1 to keyCount do
			(
				oneKey = oneBone.ky[k]
				
				format "%%%{%\"tm\":%" comma3 nl (tabs 6) sp oneKey.tm to:stream
				
				if (exportAnimationBonePosition) then
				(
					format ",%\"ps\":%" sp (fp oneKey.ps) to:stream
				)
				
				if (exportAnimationBoneRotation) then
				(
					format ",%\"rt\":" sp to:stream
					formatQuaternion oneKey.rt stream
				)
				
				if (exportAnimationBoneScale) then
				(
					format ",%\"sc\":%" sp (fp oneKey.sc) to:stream
				)
				
				format "%}" sp to:stream
				
				comma3 = ","
			)
			
			format "%%]" nl (tabs 5) to:stream
			format "%%}" nl (tabs 4) to:stream
			comma2 = ","
		)
		
		sliderTime = initialSliderTimePos
		
		format "%%]" nl (tabs 3) to:stream
		format "%%}%" nl (tabs 2) nl to:stream
	)
)
