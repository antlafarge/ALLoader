fn processBoneForOneVertex objSkin vertexIndex allBonesReindexed skinIndices skinWeights =
(
	weightCountTotal = skinOps.GetVertexWeightCount objSkin vertexIndex
	vertexSkinIndices = #()
	vertexSkinWeights = #()
	weightIndex = 0
	
	-- Retrieve BoneIndices and BoneWeights
	while weightIndex < weightCountTotal do
	(
		weightIndex += 1
		
		-- boneIndexes
		boneIndex = skinOps.GetVertexWeightBoneID objSkin vertexIndex weightIndex
		append vertexSkinIndices (allBonesReindexed[boneIndex] - 1)
		
		-- skinWeights
		boneWeight = skinOps.GetVertexWeight objSkin vertexIndex weightIndex
		append vertexSkinWeights boneWeight
	)

	-- padding empty unused bone slots
	while (weightIndex < 4) do
	(
		append vertexSkinIndices 0
		append vertexSkinWeights 0
		weightIndex += 1
	)
	
	-- Keep only 4 values
	while (vertexSkinIndices.count > 4) do
	(
		minValue = amin vertexSkinWeights
		index = findItem vertexSkinWeights minValue
		deleteItem vertexSkinIndices index
		deleteItem vertexSkinWeights index
	)

	join skinIndices vertexSkinIndices
	join skinWeights vertexSkinWeights
)

fn formatObject obj stream =
(
	comma = ""
	
	format "%\"%\":%{" (tabs 2) obj.name sp to:stream
	
	if (exportMeshAssociatedMaterial and obj.material != undefined) then
	(
		format "%%%\"mt\":%\"%\"" comma nl (tabs 3) sp obj.material.name to:stream
		comma = ","
	)
	
	ObjectOffsetTransform = obj.objectTransform * inverse obj.transform
	
	localTransform = obj.transform
	localRotation = localTransform.rotation
	
	if (flipAxis) then
	(
		localTransform *= flipAxisMatrix
		localRotation *= flipAxisMatrix
	)
	
	if (exportMeshPosition) then
	(
		format "%%%\"ps\":%%" comma nl (tabs 3) sp (fp localTransform.position) to:stream
		comma = ","
	)
	
	if (exportMeshRotation) then
	(
		format "%%%\"rt\":%" comma nl (tabs 3) sp to:stream
		formatQuaternion (inverse localRotation) stream
		comma = ","
	)
	
	if (exportMeshScale) then
	(
		format "%%%\"sc\":%%" comma nl (tabs 3) sp (fp localTransform.scale) to:stream
		comma = ","
	)
	
	objMesh = obj.mesh
	
	numTVerts = getNumTVerts objMesh
	numCPVFaces = getNumCPVVerts objMesh
    
	vertices = #()
	vertexIndices = #()
	vertexNormals = #()
	faceNormals = #()
	uvs = #()
	uvsIndices = #()
	vertexColors = #()
	faceColors = #()
	
	-- Parse faces
	for f = 1 to objMesh.numfaces do
	(
		-- Get face
		face = getFace objMesh f
		
		-- Processing for multi material
		matID = getFaceMatID objMesh f
		
		-- Create indices array if not existing
		if (vertexIndices[matID] == undefined) then
		(
			if (not exportMeshVertexIndices) then
			(
				vertices[matID] = #()
				vertexNormals[matID] = #()
				vertexColors[matID] = #()
			)
			vertexIndices[matID] = #()
			faceNormals[matID] = #()
			if (not exportMeshUVsIndexed) then
			(
				uvs[matID] = #()
			)
			faceColors[matID] = #()
			uvsIndices[matID] = #()
		)
		
		append vertexIndices[matID] (face.x - 1)
		append vertexIndices[matID] (face.y - 1)
		append vertexIndices[matID] (face.z - 1)
		
		-- If vertices not indexed
		if (not exportMeshVertexIndices) then
		(
			-- Unindex vertices
			if (not exportMeshVertexIndices) then
			(
				vert1 = ((getVert objMesh face.x) * ObjectOffsetTransform)
				vert2 = ((getVert objMesh face.y) * ObjectOffsetTransform)
				vert3 = ((getVert objMesh face.z) * ObjectOffsetTransform)
				if flipAxis then
				(
					vert1 *= flipAxisMatrix
					vert2 *= flipAxisMatrix
					vert3 *= flipAxisMatrix
				)
				append vertices[matID] vert1.x
				append vertices[matID] vert1.y
				append vertices[matID] vert1.z
				append vertices[matID] vert2.x
				append vertices[matID] vert2.y
				append vertices[matID] vert2.z
				append vertices[matID] vert3.x
				append vertices[matID] vert3.y
				append vertices[matID] vert3.z
			)
			
			-- Unindex vertex normals
			if (exportMeshVertexNormals) then
			(
				normal1 = (getNormal objMesh face.x)
				normal2 = (getNormal objMesh face.y)
				normal3 = (getNormal objMesh face.z)
				if flipAxis then
				(
					normal1 *= flipAxisMatrix
					normal2 *= flipAxisMatrix
					normal3 *= flipAxisMatrix
				)
				append vertexNormals[matID] normal1.x
				append vertexNormals[matID] normal1.y
				append vertexNormals[matID] normal1.z
				append vertexNormals[matID] normal2.x
				append vertexNormals[matID] normal2.y
				append vertexNormals[matID] normal2.z
				append vertexNormals[matID] normal3.x
				append vertexNormals[matID] normal3.y
				append vertexNormals[matID] normal3.z
			)
			
			-- Unindex vertex colors
			if (exportMeshVertexColors) then
			(
				color1 = (getVertColor objMesh face.x)
				color2 = (getVertColor objMesh face.y)
				color3 = (getVertColor objMesh face.z)
				append vertexColors[matID] color1.r
				append vertexColors[matID] color1.g
				append vertexColors[matID] color1.b
				append vertexColors[matID] color2.r
				append vertexColors[matID] color2.g
				append vertexColors[matID] color2.b
				append vertexColors[matID] color3.r
				append vertexColors[matID] color3.g
				append vertexColors[matID] color3.b
			)
		)
		
		-- Face normals
		if (exportMeshFaceNormals) then
		(
			normal = (getFaceNormal objMesh f)
			if flipAxis then
			(
				normal *= flipAxisMatrix
			)
			append faceNormals[matID] normal.x
			append faceNormals[matID] normal.y
			append faceNormals[matID] normal.z
		)
		
		-- Face vertex colors
		if (exportMeshFaceVertexColors and numCPVFaces > 0) then
		(
			faceColor = (getVCFace objMesh f)
			color1 = (getVertColor objMesh faceColor.x)
			color2 = (getVertColor objMesh faceColor.y)
			color3 = (getVertColor objMesh faceColor.z)
			append faceColors[matID] color1.r
			append faceColors[matID] color1.g
			append faceColors[matID] color1.b
			append faceColors[matID] color2.r
			append faceColors[matID] color2.g
			append faceColors[matID] color2.b
			append faceColors[matID] color3.r
			append faceColors[matID] color3.g
			append faceColors[matID] color3.b
		)
		
		-- UVs
		if (exportMeshUVsIndexed) then
		(
			if (numTVerts > 0) then
			(
				tvface = GetTVFace objMesh f
				append uvsIndices[matID] (tvface.x - 1)
				append uvsIndices[matID] (tvface.y - 1)
				append uvsIndices[matID] (tvface.z - 1)
			)
		)
		else if (exportMeshUVs and numTVerts > 0) then
		(
			tvface = GetTVFace objMesh f
			tvert = (getTVert objMesh tvface.x)
			tvert = (getTVert objMesh tvface.y)
			tvert = (getTVert objMesh tvface.z)
			append uvs[matID] tvert.x
			append uvs[matID] tvert.y
			append uvs[matID] tvert.x
			append uvs[matID] tvert.y
			append uvs[matID] tvert.x
			append uvs[matID] tvert.y
		)
	)
	
	-- INDEXED
	if (exportMeshVertexIndices) then
	(
		-- Indices
		format "%%%\"vi\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to vertexIndices.count do
		(
			format "%%%" comma2 nl (tabs 4) to:stream
			formatArray3 vertexIndices[index] stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
		
		-- Vertices
		if (exportMeshVertexPositions) then
		(
			format "%%%\"vp\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numverts do
			(
				vert = ((getVert objMesh v) * ObjectOffsetTransform)
				if flipAxis then
				(
					vert *= flipAxisMatrix
				)
				format "%%,%,%" comma2 (fp vert.x) (fp vert.y) (fp vert.z) to:stream
				comma2 = commasp
			)
			format "]" to:stream
			comma = ","
		)
		
		-- Vertex normals
		if (exportMeshVertexNormals) then
		(
			format "%%%\"vn\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numverts do
			(
				normal = (getNormal objMesh v)
				if flipAxis then
				(
					normal *= flipAxisMatrix
				)
				format "%%,%,%" comma2 (fp normal.x) (fp normal.y) (fp normal.z) to:stream
				comma2 = commasp
			)
			format "]" to:stream
			comma = ","
		)
		
		-- Vertex colors
		if (exportMeshVertexColors) then
		(
			format "%%%\"vc\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numverts do
			(
				normal = (getNormal objMesh v)
				if flipAxis then
				(
					normal *= flipAxisMatrix
				)
				format "%%,%,%" comma2 (fp normal.x) (fp normal.y) (fp normal.z) to:stream
				comma2 = commasp
			)
			format "]" to:stream
			comma = ","
		)
	)
	-- NOT INDEXED
	else
	(
		-- Vertices
		if (exportMeshVertexPositions) then
		(
			format "%%%\"vp\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for index = 1 to vertices.count do
			(
				format "%%%" comma2 nl (tabs 4) to:stream
				formatArray3 vertices[index] stream
				comma2 = ","
			)
			format "%%]" nl (tabs 3) to:stream
			comma = ","
		)
		
		-- Vertex normals
		if (exportMeshVertexNormals) then
		(
			format "%%%\"vn\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for index = 1 to vertexNormals.count do
			(
				format "%%%" comma2 nl (tabs 4) to:stream
				formatArray3 vertexNormals[index] stream
				comma2 = ","
			)
			format "%%]" nl (tabs 3) to:stream
			comma = ","
		)
		
		-- Vertex colors
		if (exportMeshVertexColors) then
		(
			format "%%%\"vc\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for index = 1 to vertexColors.count do
			(
				format "%%%" comma2 nl (tabs 4) to:stream
				formatArray3 vertexColors[index] stream
				comma2 = ","
			)
			format "%%]" nl (tabs 3) to:stream
			comma = ","
		)
	)
	
	-- Face normals
	if (exportMeshFaceNormals) then
	(
		format "%%%\"fn\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to faceNormals.count do
		(
			format "%%%" comma2 nl (tabs 4) to:stream
			formatArray3 faceNormals[index] stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	-- Face vertex normals
	if (exportMeshFaceVertexColors) then
	(
		format "%%%\"fc\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to faceColors.count do
		(
			format "%%%" comma2 nl (tabs 4) to:stream
			formatArray3 faceColors[index] stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	-- UVs indexed
	if (exportMeshUVsIndexed) then
	(
		-- UV indices
		if (exportMeshUVsIndexed) then
		(
			format "%%%\"ui\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for index = 1 to uvsIndices.count do
			(
				format "%%%" comma2 nl (tabs 4) to:stream
				formatArray3 uvsIndices[index] stream
				comma2 = ","
			)
			format "%%]" nl (tabs 3) to:stream
			comma = ","
		)
		
		-- UVs
		if (exportMeshUVs) then
		(
			format "%%%\"uv\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numTVerts do
			(
				tvert = (getTVert objMesh v)
				format "%%,%" comma2 (fp tvert.x) (fp tvert.y) to:stream
				comma2 = commasp
			)
			format "%]" sp to:stream
			comma = ","
		)
	)
	-- UVs
	else if (exportMeshUVs) then
	(
		format "%%%\"uv\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to uvs.count do
		(
			format "%%%" comma2 nl (tabs 4) to:stream
			formatArray2 uvs[index] stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	-- Skin
	objSkin = obj.modifiers[#skin]
	if ((exportMeshAssociatedSkin or exportMeshSkinIndices or exportMeshSkinWeights) and objSkin != undefined) then
	(
		bonesFromSkin = skinOps.GetBoneNodes objSkin
		allBonesSorted = getAllBonesSorted bonesFromSkin
		allBonesReindexed = getAllBonesReindexed bonesFromSkin allBonesSorted
		
		skinIndices = #()
		skinWeights = #()
		
		for vertexIndex = 1 to objMesh.numverts do
		(
			processBoneForOneVertex objSkin vertexIndex allBonesReindexed skinIndices skinWeights
		)
		
		if (exportMeshAssociatedSkin) then
		(
			format "%%%\"sk\":%\"%\"" comma nl (tabs 3) sp obj.name to:stream
			comma = ","
		)
		
		if (exportMeshSkinIndices and skinIndices.count > 0) then
		(
			format "%%%\"si\":%" comma nl (tabs 3) sp to:stream
			formatArray4AsInteger skinIndices stream
			comma = ","
		)
		
		if (exportMeshSkinWeights and skinWeights.count > 0) then
		(
			format "%%%\"sw\":%" comma nl (tabs 3) sp to:stream
			formatArray4 skinWeights stream
			comma = ","
		)
	)
	
	format "%%}%" nl (tabs 2) nl to:stream
)
