fn processBoneForOneVertex objSkin vertexIndex skinIndices skinWeights =
(
	weightCountTotal = skinOps.GetVertexWeightCount objSkin vertexIndex
	vertexSkinIndices = #()
	vertexSkinWeights = #()
	weightIndex = 1
	
	-- Retrieve BoneIndices and BoneWeights
	for weightIndex = 1 to weightCountTotal do
	(
		-- boneIndexes
		boneIndex = skinOps.GetVertexWeightBoneID objSkin vertexIndex weightIndex
		append vertexSkinIndices (boneIndex - 1)
		
		-- skinWeights
		boneWeight = skinOps.GetVertexWeight objSkin vertexIndex weightIndex
		append vertexSkinWeights boneWeight
	)
	
	-- padding empty unused bone slots
	while (weightIndex < 4) do
	(
		append vertexSkinIndices 0
		append vertexSkinWeights 0
		weightIndex += 1
	)
	
	-- Keep only 4 values
	while (vertexSkinIndices.count > 4) do
	(
		minValue = amin vertexSkinWeights
		index = findItem vertexSkinWeights minValue
		deleteItem vertexSkinIndices index
		deleteItem vertexSkinWeights index
	)
	
	join skinIndices vertexSkinIndices
	join skinWeights vertexSkinWeights
)

fn formatObject obj stream =
(
	comma = ""
	
	format "%\"%\":%{" (tabs 2) obj.name sp to:stream
	
	if (exportMeshAssociatedMaterial and obj.material != undefined) then
	(
		format "%%%\"mt\":%\"%\"" comma nl (tabs 3) sp obj.material.name to:stream
		comma = ","
	)
	
	ObjectOffsetTransform = obj.objectTransform * inverse obj.transform
	
	localTransform = obj.transform
	localRotation = localTransform.rotation
	
	if (flipAxis) then
	(
		localTransform *= flipAxisMatrix
		localRotation *= flipAxisMatrix
	)
	
	if (exportMeshPosition) then
	(
		format "%%%\"ps\":%%" comma nl (tabs 3) sp (formatPoint3 localTransform.position) to:stream
		comma = ","
	)
	
	if (exportMeshRotation) then
	(
		format "%%%\"rt\":%%" comma nl (tabs 3) sp (formatQuaternion (inverse localRotation)) to:stream
		comma = ","
	)
	
	if (exportMeshScale) then
	(
		format "%%%\"sc\":%%" comma nl (tabs 3) sp (formatPoint3 localTransform.scale) to:stream
		comma = ","
	)
	
	objMesh = obj.mesh
    
	vertices = #()
	vertex_indices = #()
	vertex_normals = #()
	face_normals = #()
	uv = #()
	uv_indices = #()
	
	-- Parse faces
	for f = 1 to objMesh.numfaces do
	(
		-- Get face
		face = getFace objMesh f
		
		-- Processing for multi material
		matID = getFaceMatID objMesh f
		
		-- Create indices array if not existing
		if (vertex_indices[matID] == undefined) then
		(
			vertices[matID] = #()
			vertex_indices[matID] = #()
			face_normals[matID] = #()
			vertex_normals[matID] = #()
			uv[matID] = #()
			uv_indices[matID] = #()
		)
		
		-- Vertex
		if (not exportMeshIndexedVertices) then
		(
			vert1 = ((getVert objMesh face.x) * ObjectOffsetTransform)
			vert2 = ((getVert objMesh face.y) * ObjectOffsetTransform)
			vert3 = ((getVert objMesh face.z) * ObjectOffsetTransform)
			if flipAxis then
			(
				vert1 *= flipAxisMatrix
				vert2 *= flipAxisMatrix
				vert3 *= flipAxisMatrix
			)
			append vertices[matID] vert1.x
			append vertices[matID] vert1.y
			append vertices[matID] vert1.z
			append vertices[matID] vert2.x
			append vertices[matID] vert2.y
			append vertices[matID] vert2.z
			append vertices[matID] vert3.x
			append vertices[matID] vert3.y
			append vertices[matID] vert3.z
		)
		
		-- Vertex index
		append vertex_indices[matID] (face.x - 1)
		append vertex_indices[matID] (face.y - 1)
		append vertex_indices[matID] (face.z - 1)
		
		-- Normals
		if (exportMeshFaceNormals) then
		(
			normal = (getfacenormal objMesh f)
			if flipAxis then
			(
				normal *= flipAxisMatrix
			)
			append face_normals[matID] (normal.x)
			append face_normals[matID] (normal.y)
			append face_normals[matID] (normal.z)
		)
		else if (exportMeshVertexNormals) then
		(
			normal1 = (getNormal objMesh face.x)
			normal2 = (getNormal objMesh face.y)
			normal3 = (getNormal objMesh face.z)
			if flipAxis then
			(
				normal1 *= flipAxisMatrix
				normal2 *= flipAxisMatrix
				normal3 *= flipAxisMatrix
			)
			append vertex_normals[matID] normal1.x
			append vertex_normals[matID] normal1.y
			append vertex_normals[matID] normal1.z
			append vertex_normals[matID] normal2.x
			append vertex_normals[matID] normal2.y
			append vertex_normals[matID] normal2.z
			append vertex_normals[matID] normal3.x
			append vertex_normals[matID] normal3.y
			append vertex_normals[matID] normal3.z
		)
		
		-- UVs
		if (getNumTVerts objMesh > 0) then
		(
			tvface = GetTVFace objMesh f
			if (exportMeshIndexedUVs) then
			(
				append uv_indices[matID] (tvface.x - 1)
				append uv_indices[matID] (tvface.y - 1)
				append uv_indices[matID] (tvface.z - 1)
			)
			else
			(
				tvert = (getTVert objMesh tvface.x)
				append uv[matID] tvert.x
				append uv[matID] tvert.y
				tvert = (getTVert objMesh tvface.y)
				append uv[matID] tvert.x
				append uv[matID] tvert.y
				tvert = (getTVert objMesh tvface.z)
				append uv[matID] tvert.x
				append uv[matID] tvert.y
			)
		)
	)
	
	if (exportMeshIndexedVertices and vertex_indices.count > 0) then
	(
		if (exportMeshVertices) then
		(
			format "%%%\"vt\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numverts do
			(
				vert = ((getVert objMesh v) * ObjectOffsetTransform)
				if flipAxis then
				(
					vert *= flipAxisMatrix
				)
				format "%%%,%,%" comma2 sp (fp vert.x) (fp vert.y) (fp vert.z) to:stream
				comma2 = ","
			)
			format "%]" sp to:stream
			comma = ","
		)
		
		format "%%%\"vi\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to vertex_indices.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (if vertex_indices[index] != undefined then (formatArray vertex_indices[index]) else "") to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	else if (exportMeshVertices) then
	(
		format "%%%\"vt\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to vertices.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (if vertices[index] != undefined then (formatArray vertices[index]) else "") to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	if (exportMeshFaceNormals and face_normals.count > 0) then
	(
		format "%%%\"fn\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to face_normals.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (if face_normals[index] != undefined then (formatArray face_normals[index]) else "") to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	else if (exportMeshVertexNormals) then
	(
		format "%%%\"vn\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to face_normals.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (if face_normals[index] != undefined then (formatArray vertex_normals[index]) else "") to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	if (exportMeshIndexedUVs) then
	(
		if (exportMeshUVs and objMesh.numTVerts > 0) then
		(
			format "%%%\"uv\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for v = 1 to objMesh.numTVerts do
			(
				tvert = (getTVert objMesh v)
				format "%%%,%" comma2 sp (fp tvert.x) (fp tvert.y) to:stream
				comma2 = ","
			)
			format "%]" sp to:stream
			comma = ","
		)
		
		if (exportMeshIndexedUVs and uv_indices.count > 0) then
		(
			format "%%%\"ui\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for index = 1 to uv_indices.count do
			(
				format "%%%[%]" comma2 nl (tabs 4) (if uv_indices[index] != undefined then (formatArray uv_indices[index]) else "") to:stream
				comma2 = ","
			)
			format "%%]" nl (tabs 3) to:stream
			comma = ","
		)
	)
	else if (exportMeshUVs and uv.count > 0) then
	(
		format "%%%\"uv\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to uv.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (if uv[index] != undefined then (formatArray uv[index]) else "") to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	objSkin = obj.modifiers[#skin]
	if ((exportMeshAssociatedSkin or exportMeshSkinIndices or exportMeshSkinWeights) and objSkin != undefined) then
	(
		skinIndices = #()
		skinWeights = #()
		
		for vertexIndex = 1 to objMesh.numverts do
		(
			processBoneForOneVertex objSkin vertexIndex skinIndices skinWeights
		)
		
		if (exportMeshAssociatedSkin) then
		(
			format "%%%\"sk\":%\"%\"" comma nl (tabs 3) sp obj.name to:stream
			comma = ","
		)
		
		if (exportMeshSkinIndices and skinIndices.count > 0) then
		(
			format "%%%\"si\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for skinIndex = 1 to skinIndices.count do
			(
				format "%%" comma2 (skinIndices[skinIndex] as integer) to:stream
				comma2 = ","
			)
			format "]" to:stream
			comma = ","
		)
		
		if (exportMeshSkinWeights and skinWeights.count > 0) then
		(
			format "%%%\"sw\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for skinIndex = 1 to skinWeights.count do
			(
				format "%%" comma2 (fp skinWeights[skinIndex]) to:stream
				comma2 = ","
			)
			format "]" to:stream
			comma = ","
		)
	)
	
	format "%%}%" nl (tabs 2) nl to:stream
)
