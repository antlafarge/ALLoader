fn processBoneForOneVertex objSkin vertexIndex skinIndices skinWeights =
(
	weightCountTotal = skinOps.GetVertexWeightCount objSkin vertexIndex
	vertexSkinIndices = #()
	vertexSkinWeights = #()
	weightIndex = 1
	
	-- Retrieve BoneIndices and BoneWeights
	for weightIndex = 1 to weightCountTotal do
	(
		-- boneIndexes
		boneIndex = skinOps.GetVertexWeightBoneID objSkin vertexIndex weightIndex
		append vertexSkinIndices (boneIndex - 1)
		
		-- skinWeights
		boneWeight = skinOps.GetVertexWeight objSkin vertexIndex weightIndex
		append vertexSkinWeights boneWeight
	)
	
	-- padding empty unused bone slots
	while (weightIndex < 4) do
	(
		append vertexSkinIndices 0
		append vertexSkinWeights 0
		weightIndex += 1
	)
	
	-- Keep only 4 values
	while (vertexSkinIndices.count > 4) do
	(
		minValue = amin vertexSkinWeights
		index = findItem vertexSkinWeights minValue
		deleteItem vertexSkinIndices index
		deleteItem vertexSkinWeights index
	)
	
	join skinIndices vertexSkinIndices
	join skinWeights vertexSkinWeights
)

fn formatObject obj stream =
(
	comma = ""
	
	format "%\"%\":%{" (tabs 2) obj.name sp to:stream
	
	if (exportMeshAssociatedMaterial and obj.material != undefined) then
	(
		format "%%%\"mt\":%\"%\"" comma nl (tabs 3) sp obj.material.name to:stream
		comma = ","
	)
	
	if (exportMeshPosition) then
	(
		format "%%%\"ps\":%%" comma nl (tabs 3) sp (point3ForOpenGL obj.position) to:stream
		comma = ","
	)
	
	if (exportMeshRotation) then
	(
		format "%%%\"rt\":%%" comma nl (tabs 3) sp (formatQuaternion (quatForOpenGL obj.rotation)) to:stream
		comma = ","
	)
	
	if (exportMeshScale) then
	(
		format "%%%\"sc\":%%" comma nl (tabs 3) sp (formatPoint3 obj.scale) to:stream
		comma = ","
	)
	
	objMesh = obj.mesh
    
	-- Faces
	vertex_indices = #()
	face_normals = #()
	uv_indices = #()
	for f = 1 to objMesh.numfaces do
	(
		-- Get face
		face = getFace objMesh f
		
		-- Processing for multi material
		matID = getFaceMatID objMesh f
		
		-- Create indices array if not existing
		if (vertex_indices[matID] == undefined) then
		(
			vertex_indices[matID] = #()
			face_normals[matID] = #()
		)
		
		-- Vertex index
		append vertex_indices[matID] (face.x - 1)
		append vertex_indices[matID] (face.y - 1)
		append vertex_indices[matID] (face.z - 1)
	
		-- Normals
		normal = (point3ForOpenGL (getfacenormal objMesh f))
		append face_normals[matID] (normal.x)
		append face_normals[matID] (normal.y)
		append face_normals[matID] (normal.z)
		
		-- UV indices
		if (getNumTVerts objMesh > 0) then
		(
			tvface = GetTVFace objMesh f
			append uv_indices (tvface.x - 1)
			append uv_indices (tvface.y - 1)
			append uv_indices (tvface.z - 1)
		)
	)
	
	if (exportMeshVertices) then
	(
		--ObjectOffsetTransformInversed = inverse (obj.objectTransform * inverse obj.transform)
		ObjectOffsetTransform = obj.objectTransform * inverse obj.transform
		
		format "%%%\"vp\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for v = 1 to objMesh.numverts do
		(
			-- TODO : Should work, why?
			--vert = (point3ForOpenGL (in coordsys ObjectOffsetTransformInversed getVert objMesh v))
			-- WORKAROUND :
			vert = (point3ForOpenGL ((getVert objMesh v) * ObjectOffsetTransform))
			format "%%%,%,%" comma2 sp (fp vert.x) (fp vert.y) (fp vert.z) to:stream
			comma2 = ","
		)
		format "%]" sp to:stream
		comma = ","
	)
	
	if (exportMeshIndexedVertices and vertex_indices.count > 0) then
	(
		format "%%%\"vi\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to vertex_indices.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (formatArray vertex_indices[index]) to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	if (exportMeshFaceNormals and face_normals.count > 0) then
	(
		format "%%%\"fn\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to face_normals.count do
		(
			format "%%%[%]" comma2 nl (tabs 4) (formatArray face_normals[index]) to:stream
			comma2 = ","
		)
		format "%%]" nl (tabs 3) to:stream
		comma = ","
	)
	
	if (exportMeshUVs and objMesh.numTVerts > 0) then
	(
		format "%%%\"uv\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for v = 1 to objMesh.numTVerts do
		(
			tvert = (getTVert objMesh v)
			format "%%%,%" comma2 sp (fp tvert.x) (fp tvert.y) to:stream
			comma2 = ","
		)
		format "%]" sp to:stream
		comma = ","
	)
	
	if (exportMeshIndexedUVs and uv_indices.count > 0) then
	(
		format "%%%\"ui\":%[" comma nl (tabs 3) sp to:stream
		comma2 = ""
		for index = 1 to uv_indices.count do
		(
			format "%%" comma2 (uv_indices[index] as integer) to:stream
			comma2 = ","
		)
		format "%]" sp to:stream
		comma = ","
	)
	
	objSkin = obj.modifiers[#skin]
	if ((exportMeshAssociatedSkin or exportMeshSkinIndices or exportMeshSkinWeights) and objSkin != undefined) then
	(
		skinIndices = #()
		skinWeights = #()
		
		for vertexIndex = 1 to objMesh.numverts do
		(
			processBoneForOneVertex objSkin vertexIndex skinIndices skinWeights
		)
		
		if (exportMeshAssociatedSkin) then
		(
			format "%%%\"sk\":%\"%\"" comma nl (tabs 3) sp obj.name to:stream
			comma = ","
		)
		
		if (exportMeshSkinIndices and skinIndices.count > 0) then
		(
			format "%%%\"si\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for skinIndex = 1 to skinIndices.count do
			(
				format "%%" comma2 (skinIndices[skinIndex] as integer) to:stream
				comma2 = ","
			)
			format "]" to:stream
			comma = ","
		)
		
		if (exportMeshSkinWeights and skinWeights.count > 0) then
		(
			format "%%%\"sw\":%[" comma nl (tabs 3) sp to:stream
			comma2 = ""
			for skinIndex = 1 to skinWeights.count do
			(
				format "%%" comma2 (fp skinWeights[skinIndex]) to:stream
				comma2 = ","
			)
			format "]" to:stream
			comma = ","
		)
	)
	
	format "%%}%" nl (tabs 2) nl to:stream
)
