fn isGeometry o =
(
	((Superclassof o) == GeometryClass) and ((classof o) != BoneGeometry)
)

-- Return the cached number of tabulations if output is not compressed
fn tabs tabsCount =
(
	if (compressJson) then
	(
		""
	)
	else
	(
		for tabIndex = TAB_ARRAY.count + 1 to tabsCount do
		(
			TAB_ARRAY[tabIndex] = TAB_ARRAY[tabIndex - 1] + "\t"
		)
		TAB_ARRAY[tabsCount]
	)
)

fn fp value =
(
	formattedPrint value format:formattedPrintFormat
)

fn formatQuaternion myQuat stream =
(
	format "[%,%,%,%]" (fp myQuat.x) (fp myQuat.y) (fp myQuat.z) (fp myQuat.w) to:stream
)

fn formatArray pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		for index = 1 to pieces.count do
		(
			format "%%" comma (fp pieces[index]) to:stream
			comma = ","
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)

fn formatArray2 pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		index = 1
		count = pieces.count
		while (index < count) do
		(
			format "%%,%" comma (fp pieces[index]) (fp pieces[index+1]) to:stream
			comma = commasp
			index += 2
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)

fn formatArray3 pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		index = 1
		count = pieces.count
		while (index < count) do
		(
			format "%%,%,%" comma (fp pieces[index]) (fp pieces[index+1]) (fp pieces[index+2]) to:stream
			comma = commasp
			index += 3
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)

fn formatArray4 pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		index = 1
		count = pieces.count
		while (index < count) do
		(
			format "%%,%,%,%" comma (fp pieces[index]) (fp pieces[index+1]) (fp pieces[index+2]) (fp pieces[index+3]) to:stream
			comma = commasp
			index += 4
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)

fn formatArrayAsInteger pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		for index = 1 to pieces.count do
		(
			format "%%" comma (pieces[index] as integer) to:stream
			comma = ","
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)

fn formatArray4AsInteger pieces stream =
(
	if pieces != undefined then
	(
		format "[" to:stream
		comma = ""
		index = 1
		count = pieces.count
		while (index <= count) do
		(
			format "%%,%,%,%" comma (pieces[index] as integer) (pieces[index+1] as integer) (pieces[index+2] as integer) (pieces[index+3] as integer) to:stream
			comma = commasp
			index += 4
		)
		format "]" to:stream
	)
	else
	(
		format "[]" to:stream
	)
)
