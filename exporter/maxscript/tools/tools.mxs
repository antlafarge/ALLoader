-- Return the cached number of tabulations if output is not compressed
fn tabs tabsCount =
(
	if (compressJson) then
	(
		""
	)
	else
	(
		for tabIndex = TAB_ARRAY.count + 1 to tabsCount do
		(
			TAB_ARRAY[tabIndex] = TAB_ARRAY[tabIndex - 1] + "\t"
		)
		TAB_ARRAY[tabsCount]
	)
)

fn fp value =
(
	formattedPrint value format:formattedPrintFormat
)

fn formatPoint3 myPoint3 =
(
	fp myPoint3
)

fn formatQuaternion myQuat =
(
	stream = stringstream ""
	format "[%,%,%,%]" (fp myQuat.x) (fp myQuat.y) (fp myQuat.z) (fp myQuat.w) to:stream
	stream as string
)

fn formatArray pieces =
(
	stream = stringstream ""
	count = pieces.count
	for index = 1 to count do
	(
		format "%%" (fp pieces[index]) (if index != count then "," else "") to:stream
	)
	stream as string
)

fn formatArrayAsInteger pieces =
(
	stream = stringstream ""
	count = pieces.count
	for index = 1 to count do
	(
		format "%%" (pieces[index] as integer) (if index != count then "," else "") to:stream
	)
	stream as string
)

fn formatUvArray pieces =
(
	stream = stringstream ""
	count = pieces.count
	for index = 1 to count do
	(
		piece = pieces[index]
		format "%,%,%%%" (fp piece.x) (fp piece.y) (if index != count then "," else "") sp to:stream
	)
	stream as string
)

fn formatPoint3Array pieces =
(
	stream = stringstream ""
	if (pieces != undefined) then
	(
		count = pieces.count
		for index = 1 to count do
		(
			piece = pieces[index]
			format "%,%,%%%" (fp piece.x) (fp piece.y) (fp piece.z) (if index != count then "," else "") sp to:stream
		)
	)
	stream as string
)

fn formatColorRgbaArray pieces =
(
	stream = stringstream ""
	if (pieces != undefined) then
	(
		count = pieces.count
		for index = 1 to count do
		(
			piece = pieces[index]
			format "%,%,%,%%%" (fp piece.r) (fp piece.g) (fp piece.b) (fp piece.a) (if index != count then "," else "") sp to:stream
		)
	)
	stream as string
)

fn formatColorRgbArray pieces =
(
	stream = stringstream ""
	if (pieces != undefined) then
	(
		count = pieces.count
		for index = 1 to count do
		(
			piece = pieces[index]
			format "%,%,%%%" (fp piece.r) (fp piece.g) (fp piece.b) (if index != count then "," else "") sp to:stream
		)
	)
	stream as string
)

fn formatQuatArray pieces =
(
	stream = stringstream ""
	if (pieces != undefined) then
	(
		count = pieces.count
		for index = 1 to count do
		(
			myQuat = pieces[index]
			format "%,%,%,%%%" (fp q4.x) (fp q4.y) (fp q4.z) (fp q4.w) (if count != count then "," else "") sp to:stream
		)
	)
	stream as string
)

fn isGeometry o =
(
	((Superclassof o) == GeometryClass) and ((classof o) != BoneGeometry)
)

fn point3ForOpenGL myPoint3 =
(
	if flipAxis then (myPoint3 * flipAxisMatrix) else myPoint3
)

fn quatForOpenGL myQuat =
(
	if flipAxis then (myQuat * flipAxisMatrix) else myQuat
)
